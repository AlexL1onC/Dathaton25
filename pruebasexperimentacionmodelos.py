# -*- coding: utf-8 -*-
"""PruebasExperimentacionModelos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Wx_pAQyJ7A8lM1XAbKKljDl1KeA4yz_

Diseño de experimentos
"""

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

data = pd.read_csv('df_merged_clean.csv')
data

# Asegurar tipo datetime
data['fecha'] = pd.to_datetime(data['fecha'])

# Filtrar y preparar la serie
usuario_1 = data[data['id'] == 'Usuario 1'].copy()
usuario_1 = usuario_1.sort_values(by='fecha')
usuario_1.set_index('fecha', inplace=True)
serie = usuario_1['monto']

# Dividir en entrenamiento (5 meses) y validación (3 meses)
fecha_fin = serie.index.max()
fecha_validacion_inicio = fecha_fin - pd.DateOffset(months=3)
fecha_entrenamiento_inicio = fecha_validacion_inicio - pd.DateOffset(months=5)

serie_filtrada = serie[(serie.index >= fecha_entrenamiento_inicio)]

train = serie_filtrada[serie_filtrada.index < fecha_validacion_inicio]
valid = serie_filtrada[serie_filtrada.index >= fecha_validacion_inicio]

# Ajustar modelo ARIMA como AR puro: AR(p)
modelo_ar = ARIMA(train, order=(3, 0, 0))  # AR(5)
modelo_ajustado = modelo_ar.fit()

from sklearn.metrics import mean_squared_error
import numpy as np

# Generar predicciones para el período de validación
predicciones = modelo_ajustado.forecast(steps=len(valid))

# Calcular RMSE
rmse = np.sqrt(mean_squared_error(valid, predicciones))
print(f"RMSE del modelo ARIMA(3,0,0): {rmse:.2f}")

from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import numpy as np

# Ajustar modelo SARIMA(p,d,q)(P,D,Q,s)
modelo_sarima = SARIMAX(train, order=(3, 0, 0), seasonal_order=(1, 0, 1, 12))
resultado_sarima = modelo_sarima.fit(disp=False)

# Predicciones
pred_sarima = resultado_sarima.forecast(steps=len(valid))

# Calcular RMSE
rmse_sarima = np.sqrt(mean_squared_error(valid, pred_sarima))
print(f"RMSE del modelo SARIMA(3,0,0)(1,0,1,12): {rmse_sarima:.2f}")

!pip install arch

from arch import arch_model

# Residuales del modelo ARIMA ya ajustado
residuos = modelo_ajustado.resid.dropna()

# Ajustar modelo ARCH (ej. ARCH(1))
modelo_arch = arch_model(residuos, vol='ARCH', p=1)
resultado_arch = modelo_arch.fit(disp='off')

# Predecir la varianza condicional
forecast_arch = resultado_arch.forecast(horizon=len(valid))
pred_varianza = forecast_arch.variance.values[-1]

# RMSE aproximado como raíz de varianza promedio (no es forecast del monto)
rmse_arch = np.sqrt(np.mean(pred_varianza))
print(f"RMSE aproximado del modelo ARCH(1): {rmse_arch:.2f}")